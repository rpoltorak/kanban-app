// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Card Component to match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    deleteCard={[MockFunction]}
    description="some description"
    id="21"
    laneId="1"
    title="some title"
    updateDescription={[MockFunction]}
    updateTitle={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="card__title"
        >
          <Editable
            minLength={1}
            onChange={[MockFunction]}
            value="some title"
          />
        </div>,
        <div
          className="card__description"
        >
          <Editable
            onChange={[MockFunction]}
            placeholder="description"
            value="some description"
          />
        </div>,
        <button
          className="btn--delete"
          onClick={[MockFunction]}
        >
          ×
        </button>,
      ],
      "className": "card",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Editable
            minLength={1}
            onChange={[MockFunction]}
            value="some title"
          />,
          "className": "card__title",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "minLength": 1,
            "onChange": [MockFunction],
            "value": "some title",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Editable
            onChange={[MockFunction]}
            placeholder="description"
            value="some description"
          />,
          "className": "card__description",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "onChange": [MockFunction],
            "placeholder": "description",
            "value": "some description",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "×",
          "className": "btn--delete",
          "onClick": [MockFunction],
        },
        "ref": null,
        "rendered": "×",
        "type": "button",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="card__title"
          >
            <Editable
              minLength={1}
              onChange={[MockFunction]}
              value="some title"
            />
          </div>,
          <div
            className="card__description"
          >
            <Editable
              onChange={[MockFunction]}
              placeholder="description"
              value="some description"
            />
          </div>,
          <button
            className="btn--delete"
            onClick={[MockFunction]}
          >
            ×
          </button>,
        ],
        "className": "card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Editable
              minLength={1}
              onChange={[MockFunction]}
              value="some title"
            />,
            "className": "card__title",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "minLength": 1,
              "onChange": [MockFunction],
              "value": "some title",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Editable
              onChange={[MockFunction]}
              placeholder="description"
              value="some description"
            />,
            "className": "card__description",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "onChange": [MockFunction],
              "placeholder": "description",
              "value": "some description",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "×",
            "className": "btn--delete",
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": "×",
          "type": "button",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
